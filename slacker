#!/usr/bin/env bash
# This script was generated by bashly 0.8.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
slacker_usage() {
  if [[ -n $long_usage ]]; then
    printf "slacker - EasySlackStatus quick installer\n"
    echo

  else
    printf "slacker - EasySlackStatus quick installer\n"
    echo

  fi

  printf "Usage:\n"
  printf "  slacker [command]\n"
  printf "  slacker [command] --help | -h\n"
  printf "  slacker --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  flash       Flash the device"
  echo "  bootstrap   Installs needed files on the device and tests the setup"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
slacker_flash_usage() {
  if [[ -n $long_usage ]]; then
    printf "slacker flash - Flash the device\n"
    echo

  else
    printf "slacker flash - Flash the device\n"
    echo

  fi

  printf "Alias: f\n"
  echo

  printf "Usage:\n"
  printf "  slacker flash DEVICE\n"
  printf "  slacker flash --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  DEVICE"
    printf "    The /dev mount point where the device is mounted\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  slacker flash /dev/ttyUSB0\n"
    printf "  slacker f /dev/ttyUSB0\n"
    echo

  fi
}

# :command.usage
slacker_bootstrap_usage() {
  if [[ -n $long_usage ]]; then
    printf "slacker bootstrap - Installs needed files on the device and tests the setup\n"
    echo

  else
    printf "slacker bootstrap - Installs needed files on the device and tests the setup\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "Usage:\n"
  printf "  slacker bootstrap DEVICE [options]\n"
  printf "  slacker bootstrap --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    printf "    Force installing auto-start script\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  DEVICE"
    printf "    The /dev mount point where the device is mounted\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  slacker bootstrap /dev/ttyUSB0\n"
    printf "  slacker b /dev/ttyUSB0\n"
    printf "  slacker bootstrap --force /dev/ttyUSB0\n"
    printf "  slacker b --force /dev/ttyUSB0\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
slacker_flash_command() {
  # src/flash_command.sh
  latest_esp32="https://micropython.org/resources/firmware/esp32-20220618-v1.19.1.bin"
  device=${args[device]}
  force=${args[--force]}

  if ! [ -z "$force" ]; then
    echo "downloading $latest_esp32"
    curl -o esp32.bin $latest_esp32
    echo "Flashing on micropython to $device"
    esptool.py --chip esp32 --port "$device" --baud 460800 write_flash -z 0x1000 esp32.bin
  else
    echo "Flashing $device with --force"
    echo "Running erase_flash on $device"
    esptool.py --chip esp32 --port "$device" erase_flash
    echo "downloading $latest_esp32"
    curl -o esp32.bin $latest_esp32
    echo "Flashing on micropython to $device"
    esptool.py --chip esp32 --port "$device" --baud 460800 write_flash -z 0x1000 esp32.bin
  fi

}

# :command.function
slacker_bootstrap_command() {
  # src/bootstrap_command.sh
  device=${args[device]}
  force=${args[--force]}

  if ! [ -z "$device" ]; then
    echo "Pushing ess folder to device '${device}' (Might take a while)"
    ampy -p $device put ess
    echo "Pushing lib folder to device '${device}'"
    ampy -p $device put lib
    echo "Pushing easyslack.py to device '${device}'"
    ampy -p $device put easyslack.py
    echo "Pushing config.json to device '${device}'"
    ampy -p $device put config.json

    echo "Testing configuration..."
    if ampy -p $device run test.py; then
      echo "Test successful. Installing auto-start script"
      ampy -p $device put main.py
    else
      echo "Test failed."
      if ! [ -z "$force" ]; then
        echo "--force is used. Pushing auto-start anyway..."
        ampy -p $device put main.py
        echo "Done."
      fi
    fi
  else
    echo "Error: missing device"
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    slacker_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  flash | f )
    action="flash"
    shift
    slacker_flash_parse_requirements "$@"
    shift $#
    ;;

  bootstrap | b )
    action="bootstrap"
    shift
    slacker_bootstrap_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    slacker_usage
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action"
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
slacker_flash_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    slacker_flash_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="flash"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[device]+x} ]]; then

        args[device]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[device]+x} ]]; then
    printf "missing required argument: DEVICE\nusage: slacker flash DEVICE\n"
    exit 1
  fi

}

# :command.parse_requirements
slacker_bootstrap_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    slacker_bootstrap_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="bootstrap"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )

      # :flag.case_no_arg
      args[--force]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[device]+x} ]]; then

        args[device]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[device]+x} ]]; then
    printf "missing required argument: DEVICE\nusage: slacker bootstrap DEVICE [options]\n"
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "flash" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      slacker_flash_usage
    else
      slacker_flash_command
    fi

  elif [[ $action == "bootstrap" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      slacker_bootstrap_usage
    else
      slacker_bootstrap_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
